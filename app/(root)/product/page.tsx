
import LazyImage from '@/components/LazyImage';
import { calculateDiscountedPrice, delay, formatePrice } from '@/utils';
import axios from 'axios';
import { Metadata } from 'next';
import Image from 'next/image';
import Link from 'next/link';
import React from 'react'
export const metadata: Metadata = {
    title: "slides - SlideHub",
    description: "Generated by create next app",
};
const Product = async () => {
    const fetchProduct = async () => {
        let res = await fetch(`https://mern-24.onrender.com/products/all`)
        let data = await res.json()
        return data;
    };
    let color = `#${Math.random().toString(16).substring(2, 8)}`;



    let apiResponse = await fetchProduct();
    return (
        <div className='grid grid-cols-1 gap-2 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 py-3 w-full'>
            {
                apiResponse.map((prod: any, index: number) => {
                    return <a href={`/product/${prod._id}`} key={index}>
                        <div className="mx-auto mt-3 w-80 transform overflow-hidden rounded-lg bg-white dark:bg-zinc-900/70 shadow-md duration-300 hover:scale-105 hover:shadow-lg">

                            <div className='h-48 w-full' >
                                <img
                                    className="h-48 w-full object-cover object-center"
                                    src={prod.thumbnail}
                                    alt="Product Image"
                                />
                            </div>
                            <div className="p-4">
                                <h2 className="mb-2 text-lg font-medium dark:text-white text-gray-900">
                                    {prod.title}
                                </h2>
                                <p className="mb-2 text-base dark:text-gray-300 text-gray-700">
                                    {prod.description.slice(0, 70)}...
                                </p>
                                <div className="flex items-center">
                                    <p className="mr-2 text-lg font-semibold text-gray-900 dark:text-white">
                                        Tk {formatePrice(Number(calculateDiscountedPrice(prod.price, prod.discountPercentage).toFixed(0)))}.00


                                    </p>
                                    <p className="text-base  font-medium text-gray-500 line-through dark:text-gray-300">
                                        Tk {formatePrice(prod.price)}.00
                                    </p>
                                    <p className="ml-auto text-base font-medium text-green-500">{prod.discountPercentage}% off</p>
                                </div>
                            </div>
                        </div>

                    </a>
                })
            }
        </div>
    )
}

export default Product